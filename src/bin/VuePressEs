#!/usr/bin/env node
const program = require('commander') // 核心命令行工具
const ora = require('ora') // loading模块
const shelljs = require('shelljs'); // 前端写shell
const fs = require('fs');
const path = require('path');

// 遍历文件的时候是要有黑名单的 ===> .开头的隐藏文件不遍历，node_modules，build 文件夹 不遍历
// 首先生成 真实文件对象树 用于生成 vpe.config.json
// 根据 vpe.config.json 生成 规定文件对象树

// 用户没有生成配置文件 vpe.config.json 的情况下，就需要走默认配置


// 全局
let dirPath = shelljs.pwd().stdout
let stat = fs.stat;
let dirObjTree = readDirToObjTree() // 遍历所有的文件夹 ---> 生成 文件真实对象树
let vpeConfigObj = getVpeConfig(); // 配置对象


// ===================================================
// ============== ** npm核心命令部分 ** ================
// ===================================================

programConfigFn() // 核心命令行配置函数启动

// 核心命令行配置函数
function programConfigFn () {
    
    // -v 版本
    program.version('v1.2.1', "-v, --version")
    // -h 帮助
    program.on('--help', () => { console.log(helpTitleFu()) });

    program
        .usage("[cmd] <options>")
        .arguments('<cmd> [env]')
        .action( (cmd, otherParms) => {
            let header = binHeaderFn(cmd)
            typeof header === 'undefined' ? process.exit(1) : header()
        })

    program.parse(process.argv)
}

// 命令集合函数
function binHeaderFn (cmd) {
    
    let binHeader = {

        init () {
            console.log('生成一个初始化项目（功能暂未开放）')
        },

        serve () {
            
            createVuePressInit(dirObjTree) // 根据文件对象树，生成VuePress规则

            const spinner = ora('vpe正在启动预览功能...')
            spinner.start()

            // 暂停 1s，主要是有个加载状态，装B用 😸
            setTimeout(() => {
                shelljs.exec('npx vuepress dev build') // 执行sh脚本
                spinner.stop()
            }, 1000)
        },

        build () {

            createVuePressInit(dirObjTree) // 根据文件对象树，生成VuePress规则

            const spinner = ora('vpe正在编译中（编译后的文件在 build/.vuepress/dist 中）')
            spinner.start()

            // 暂停 1s，主要是有个加载状态，装B用 😸
            setTimeout(() => {
                shelljs.exec('npx vuepress build build') // 执行sh脚本
                spinner.stop()
            }, 1000)
            
        },

        config () {
            const spinner = ora('vpe正在创建三个配置文件...')
            spinner.start()

            // 暂停 1s，主要是有个加载状态，装B用 😸
            setTimeout(() => {
                createHomeFn()
                createRecordFn()
                createConfigFn()
                spinner.stop()
            }, 1000)
        },

        look () {
            console.log('查看最新版本更新的API（功能暂未开放）')
        }
    
    }

    return binHeader[cmd]
}


// ===================================================
// =============== ** config 命令 ** =================
// ===================================================

// 创建 HOME.md 的函数
function createHomeFn() {
    fs.writeFileSync(`${dirPath}/ZHOME.md`, homeTileFn())
}

// 创建 RECORD.md 的函数
function createRecordFn() {
    fs.writeFileSync(`${dirPath}/ZRECORD.md`, recordFn())
}

// 创建 vpe.config.json 的函数
function createConfigFn() {
    fs.writeFileSync(`${dirPath}/vpe.config.json`, vpeConfigFn())
}

// 生成 vpe.config.json 内容
function vpeConfigFn () {

    let folderShowOrder = createFolderShowOrder()

return `{
    // 左上角的标题（也是首页图像下面的一级标题）
    "title": "在vpe.config.json 中 配置 title",
    // 首页头像下面标题的解释
    "description": "在vpe.config.json 中 配置 description",
    // 右上角 跳转GitHub的地址（写一个GitHub项目地址）
    "repo": "https://github.com/itz2019/vuepress-es",

    // 设置侧边栏是否全部默认展开（一般官方介绍经常使用这个）
    "collapsable": true, // 注意：false 是展开，true 是不展开
    // 代码块是否显示行号
    "lineNumbers": false,

    // 文件夹展示顺序（有需求就进行设置，不仅可以设置需要显示的文件夹，还能设置展示的顺序，这里可能有点绕）
    "folderShowOrder": [
        ${folderShowOrder}
    ]
}`
}

// 生成 规定文件对象树（核心）
function createFolderShowOrder () {
    // 首先要遍历所有的文件夹（去除 node_modules && build）
    
    let objStr = ''
    let childrenFolderStr = ''

    // 首先需要遍历文件对象树，拿到二级 childrenFolder 属性
    dirObjTree.forEach(item => {
        item.data.forEach(jtem => {
            childrenFolderStr += `"${jtem.name}", `
        })
        objStr += `{
            "title": "${item.name}",
            "alias": "中文别名${item.name}",
            "childrenFolder": [${childrenFolderStr}]
        },
        `;
        childrenFolderStr = ''
    })

    return objStr
}

// ===================================================
// =========== ** serve && build 命令 ** =============
// ===================================================

// 生成VuePress规则
function createVuePressInit (objTree) {
    createDist() // 创建打包之后的目录
    copyDirFn() // 复制文件
    createVuePressConfig() // 根据文件对象树，生成VuePress规则
    createBasicFile(objTree) // 生成README.md 文件，不写的话会有问题
}

// 1.创建打包之后的目录build
function createDist () {

    // 如果有和打包名称一致的名称，就先删除掉
    if (fs.existsSync(path.join(dirPath, "build"))) {
        delDir(path.join(dirPath, "build"))
    }

    // 创建目录
    fs.mkdirSync(path.join(dirPath, "build"))
    fs.mkdirSync(path.join(dirPath, `./build/.vuepress`))
    console.log('1️⃣  创建打包文件夹成功')

}

// 2.复制文件夹到build
function copyDirFn () {
    
    // 这里应该根据 规定文件树 进行
    vpeConfigObj.folderShowOrder.forEach(item => {  
        exists(item.title, `${dirPath}/build/${item.title}`, copy)
    })
    console.log('2️⃣  复制文件到build目录完成')
}

// 3.生成VuePress规则
function createVuePressConfig () {

    // 读取配置集合
    let title = getConfig('title', '在 vpe.config.json 中配置 title')
    let description = getConfig('description', '在 vpe.config.json 中配置 description')
    let repo = getConfig('repo', 'https://github.com/itz2019/vuepress-es')
    let lineNumbers = getConfig('lineNumbers', false)

    let [nav, sidebar] = createNavAndSidebar()

let configStr = `module.exports = {
    title: '${title}',
    description: '${description}',
    head: [
        ['link', { rel: 'icon', href: '/favicon.ico' }]
    ],
    themeConfig: {
        repo: '${repo}',
        //导航
        nav: [
            ${nav}
        ],
        // 侧边栏
        sidebar: {
            ${sidebar}
        }
    },
    serviceWorker: true,
    markdown: {
        lineNumbers: ${lineNumbers} // 开启行号
    }
}`;
    fs.writeFileSync(`${dirPath}/build/.vuepress/config.js`, configStr)
    console.log('3️⃣  根据文件对象树，生成VuePress规则完成')
}

// 4.生成README.md文件（异步）
function createBasicFile () {
    
    // 在打包文件夹根目录 生成 README.md 要不会vuepress会产生404
    let homeTile = homeTileFn()
    fs.writeFileSync(`${dirPath}/build/README.md`, homeTile)

    setTimeout(() => {
        // 在打包文件夹 每个分类文件夹下 生成 README.md，否则内容显示不出来
        let record = recordFn()
        vpeConfigObj.folderShowOrder.forEach(item => {
            fs.writeFileSync(`${dirPath}/build/${item.title}/README.md`, record)
        })
        console.log('4️⃣  生成README.md 文件完成')

    }, 100);
}

// 读取配置，并且配置没有的时候，生成提示语句（工具函数）
function getConfig (configName, explain) {
    return vpeConfigObj ? vpeConfigObj[configName] : explain
}

// 生成导航栏，侧边栏（工具类）
function createNavAndSidebar () {
    // 根据 文件显示对象树 来生成（如果没有的话，走 文件真实对象树）

    // 是否有对象
    let isFolderShowOrder = getConfig('folderShowOrder', false)

    let nav = ''
    let sidebar = ''
    let collapsable = getConfig('collapsable', true)
    let collapsableStr = collapsable ? '' : "collapsable: false,"

    if (isFolderShowOrder) {

        isFolderShowOrder.forEach(item => {
            
            // 1.生成导航
            nav += `{ text: '${item.alias}', link: '/${item.title}/' },
            `;

            // 2.生成侧边栏

            let twLevel = ''
            item.childrenFolder.forEach(jtem => {

                // 获取到符合的数组
                let resData = dirObjTree.filter(ztem => ztem.name == item.title)[0].data.filter(ztem => ztem.name === jtem)[0].data
                
                let children = ''                
                resData.forEach(res => {
                    children += `'${item.title}/${jtem}/${res}',
                            `
                })

                twLevel += `{
                    title: '${jtem}',
                    ${collapsableStr}
                    children: [
                        ${children}
                    ]
                },
                `
            })

            sidebar += `
            '/${item.title}': [
                ${twLevel}
            ],
        `
        })

    } else {

        dirObjTree.forEach(item => {

            // 1.生成导航
            nav += `{ text: '${item.name}', link: '/${item.name}/' },
            `;
    
            // 2.生成侧边栏
            
            // 首先先循环本层的二级目录
            let twLevel = ''
            item.data.forEach(jtem => {
    
                let children = ''
                jtem.data.forEach(ztem => {
                    children += `'${item.name}/${jtem.name}/${ztem}',
                            `
                })
    
                twLevel += `
                    {
                        title: '${jtem.name}',
                        ${collapsableStr}
                        children: [
                            ${children}
                        ]
                    },
                `
            })
    
            // 拼接
            sidebar += `
                '/${item.name}': [
                    ${twLevel}
                ],
            `
    
        })
    }

    return [nav, sidebar]
}

// ===================================================
// ================= ** 通用函数 ** ===================
// ===================================================

// 遍历文件夹，生成 真实文件对象树（核心方法）
function readDirToObjTree(){
    
    let foldPath = shelljs.pwd().stdout // 当前目录的绝对路径
    let objTree = []

    function recursion (foldPath, data, isRootPath = true) {

        let files = fs.readdirSync(foldPath)
        // console.log('1️⃣ 读取某个目录下的目录结构', files)
        
        // 1.目录循环
        files.forEach(item => {
            // 如果有配置表，这里还需要进行配置过滤一下

            let isDir = fs.statSync(`${foldPath}/${item}`).isDirectory()
            // console.log(`❣️ ${item} 是否是 文件夹`, isDir)

            // 核心数据处理（是文件，并且不是以 .开头的隐藏文件，并且不是 node_modules && build）
            if (isDir && !/^\./.test(item) && item !==  'node_modules' && item !==  'build') {
                // console.log('🔥 可以进入到生成目录的文件夹', item)
                data.push({
                    name: item,
                    data: [],
                    path: `${foldPath}/${item}`
                })
            } else if (!isRootPath) {
                // console.log('✅ 不是文件夹，并且不是第一级', item)
                if (item !== '.DS_Store') data.push(item);
            }

        })

        // 2.遍历目录循环（递归）
        data.length > 0 && data[0].name !== undefined 
            ? data.forEach(item => recursion(item.path, item.data, false)) 
            : ''
    }

    recursion(foldPath, objTree)

    return objTree
}

// 复制文件夹（工具函数）
function exists (src, dst, callback) {
    //测试某个路径下文件是否存在
    fs.exists(dst, function(exists){
        if (exists) {//不存在
            callback(src,dst);
        } else {//存在
            fs.mkdir(dst,function(){//创建目录
                callback(src,dst)
            })
        }
    })
}

// 复制文件夹的辅助函数（工具函数）
function copy (src, dst) {
    //读取目录
    let paths = fs.readdirSync(src);
    paths.forEach(function(path){
        var _src=src+'/'+path;
        var _dst=dst+'/'+path;
        var readable;
        var writable;
        stat(_src,function(err,st){
            if(err){
                throw err;
            }
            
            if(st.isFile()){
                readable=fs.createReadStream(_src);//创建读取流
                writable=fs.createWriteStream(_dst);//创建写入流
                readable.pipe(writable);
            }else if(st.isDirectory()){
                exists(_src,_dst,copy);
            }
        });
    });
}
  
// 删除文件夹（工具函数）
function delDir(path){
    let files = [];
    if(fs.existsSync(path)){
        files = fs.readdirSync(path);
        files.forEach((file, index) => {
            let curPath = path + "/" + file;
            if(fs.statSync(curPath).isDirectory()){
                delDir(curPath); //递归删除文件夹
            } else {
                fs.unlinkSync(curPath); //删除文件
            }
        });
        fs.rmdirSync(path);
    }
}

// vpe help 显示的文字
function helpTitleFu () {
return `
__   __  _ __     ___ 
\\ \\ / / | '_ \\   / _ \\
 \\ V /  | |_) | |  __/
  \\_/   | .__/   \\___|
        |_|                                                                   

说明：.md ---> .html（简化VuePress配置）

- vpe config 生成配置文件（三个）
- vpe serve 启动项目预览效果（生成build文件夹）
- vpe build 打包生成html文件（目录在build/.vuepress/dist）
- vpe look 查看 vuepress-es 开放的API配置（未开放）
- vpe init 生成初始化项目（未开放）
`
}

// 获取 vpe.config.json 内容
function getVpeConfig () {
    try {
        // 读取 vpe.config.json 内容
        var dataStr = fs.readFileSync('vpe.config.json').toString();
        return eval("("+ dataStr +")")
    } catch (e) {
        // 生成默认配置对象
        return eval("("+ vpeConfigFn() +")")
    }
}

// 生成 HOME.md 文件的内容 && 读取 HOME.md
function homeTileFn () {
    try {
        // 读取 HOME.md 内容
        var dataStr = fs.readFileSync('ZHOME.md').toString();
        return dataStr
    } catch (e) {
return `---
# 如果下面某个效果你不想使用，直接注释或者删除即可
# 是否启动home页面
home: true
# 图像
heroImage: https://itzkp-1253302184.cos.ap-beijing.myqcloud.com/github%E5%9B%BE%E7%89%87/vuepress-es/1.HOME%E5%A4%B4%E5%83%8F%E5%9B%BE%E7%89%87.png
# 按钮显示文字
actionText: 🔥 在ZHOME.md中设置这里的文字 →
# 按钮跳转的连接
actionLink: /${vpeConfigObj.folderShowOrder[0].title}/
# 解释
features:
- title: 解释一（在ZHOME.md中设置） # 标题
  details: 解释一内容 # 内容
- title: 解释二
  details: 解释二内容
- title: 解释三
  details: 解释三内容
# 脚头
footer: MIT Licensed | © Copyright 2019 朱昆鹏 - All Rights Reserved（在ZHOME.md中设置）
---`
    }
}

// 生成 RECORD.md 文件的内容 && 读取 RECORD.md
function recordFn () {
    try {
        // 读取 HOME.md 内容
        var dataStr = fs.readFileSync('ZRECORD.md').toString();
        return dataStr
    } catch (e) {
        return `# 这里书写的规则，就是普通的 .md 的规则（内容在 ZRECORD.md 中修改）`
    }
}